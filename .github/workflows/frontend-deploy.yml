name: Deploy Frontend to Hostinger

on:
  push:
    branches: [ Demo ]
    paths: [ 'Frontend/**' ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: Frontend
        run: |
          rm -rf node_modules package-lock.json
          npm install --force --legacy-peer-deps --no-audit

      - name: Build project
        working-directory: Frontend
        run: npm run build:clean

      - name: Add cache busting to index.html
        working-directory: Frontend
        run: |
           # Add timestamp to force cache refresh
           TIMESTAMP=$(date +%s)
           # Add version parameter to prevent caching
           sed -i "s|<html|<html data-version=\"$TIMESTAMP\"|g" dist/index.html
           # Add meta tag for cache busting
           sed -i 's|<head>|<head>\n    <meta name="version" content="'$TIMESTAMP'" />|g' dist/index.html

      - name: Clear dist directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USER }}
          key: ${{ secrets.HOSTINGER_SSH_KEY }}
          script: |
            sudo rm -rf /var/www/html/Frontend/dist/*
            sudo rm -rf /var/www/html/Frontend/dist/Frontend
            sudo mkdir -p /var/www/html/Frontend/dist

      - name: Deploy to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USER }}
          key: ${{ secrets.HOSTINGER_SSH_KEY }}
          source: "Frontend/dist/*"
          target: "/var/www/html/Frontend/dist"
          strip_components: 0
          overwrite: true

      - name: Fix file structure and permissions
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USER }}
          key: ${{ secrets.HOSTINGER_SSH_KEY }}
          script: |
            # Check if nested structure was created and fix it
            if [ -d "/var/www/html/Frontend/dist/Frontend" ]; then
              echo "Fixing nested directory structure..."
              sudo cp -r /var/www/html/Frontend/dist/Frontend/dist/* /var/www/html/Frontend/dist/ 2>/dev/null || true
              sudo rm -rf /var/www/html/Frontend/dist/Frontend
            fi
            
            # Set proper permissions
            sudo chmod -R 755 /var/www/html/Frontend/dist/
            sudo chown -R www-data:www-data /var/www/html/Frontend/dist/
            
            # Verify files are in correct location
            echo "Verifying deployment..."
            ls -la /var/www/html/Frontend/dist/
            if [ -f "/var/www/html/Frontend/dist/index.html" ]; then
              echo "✓ index.html found in correct location"
            else
              echo "✗ index.html not found in correct location"
              exit 1
            fi

      - name: Configure nginx for HTTPS and domain-only
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USER }}
          key: ${{ secrets.HOSTINGER_SSH_KEY }}
          script: |
            sudo tee /etc/nginx/sites-available/default > /dev/null << 'EOF'
            # Block direct IP access
            server {
                listen 80 default_server;
                listen [::]:80 default_server;
                server_name _;
                return 444;
            }
            # Block direct IP access on HTTPS
            server {
                listen 443 ssl default_server;
                listen [::]:443 ssl default_server;
                server_name _;
                ssl_certificate /etc/letsencrypt/live/amoghconnect.com/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/amoghconnect.com/privkey.pem;
                return 444;
            }
            # Redirect HTTP to HTTPS for your domain
            server {
                listen 80;
                listen [::]:80;
                server_name amoghconnect.com www.amoghconnect.com;
                return 301 https://amoghconnect.com$request_uri;
            }
            # Main HTTPS server
            server {
                listen 443 ssl;
                listen [::]:443 ssl;
                server_name amoghconnect.com www.amoghconnect.com;
                root /var/www/html/Frontend/dist;
                index index.html index.htm;
                ssl_certificate /etc/letsencrypt/live/amoghconnect.com/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/amoghconnect.com/privkey.pem;
                include /etc/letsencrypt/options-ssl-nginx.conf;
                ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
                location / {
                    try_files $uri $uri/ /index.html;
                }
                location = /index.html {
                    add_header Cache-Control "no-cache, no-store, must-revalidate" always;
                    add_header Pragma "no-cache" always;
                    add_header Expires "0" always;
                }
                location /assets/ {
                    expires 1h;
                    add_header Cache-Control "public, max-age=3600";
                }
                location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|mp4)$ {
                    expires 1h;
                    add_header Cache-Control "public, max-age=3600";
                }
            }
            EOF
            sudo nginx -t && sudo systemctl reload nginx

      - name: Test API connectivity
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USER }}
          key: ${{ secrets.HOSTINGER_SSH_KEY }}
          script: |
            echo "Testing API connectivity..."
            # Test if backend is accessible from the server
            curl -I http://13.235.148.91:3000/api/test || echo "Backend not accessible from server"
            echo "Frontend deployment completed successfully!" 