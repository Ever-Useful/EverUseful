name: Deploy Frontend to Hostinger

on:
  push:
    branches: [ Demo ]
    paths: [ 'Frontend/**' ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: Frontend
        run: |
          rm -rf node_modules package-lock.json
          npm install --force --legacy-peer-deps --no-audit

      - name: Build project
        working-directory: Frontend
        run: npm run build

      - name: Verify build output
        working-directory: Frontend
        run: |
          echo "Checking build output..."
          ls -la dist/
          if [ ! -f "dist/index.html" ]; then
            echo "❌ index.html not found in build output"
            exit 1
          fi
          echo "✅ Build verification completed"

      - name: Deploy to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USER }}
          key: ${{ secrets.HOSTINGER_SSH_KEY }}
          source: "Frontend/dist"
          target: "/var/www/html/Frontend/"
          strip_components: 1
          overwrite: true

      - name: Configure server and verify deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USER }}
          key: ${{ secrets.HOSTINGER_SSH_KEY }}
          script: |
            echo "Configuring server and verifying deployment..."
            
            # Check if deployment files exist
            if [ ! -f "/var/www/html/Frontend/dist/index.html" ]; then
              echo "❌ Deployment failed - index.html not found"
              echo "📁 Contents of /var/www/html/Frontend/dist:"
              ls -la /var/www/html/Frontend/dist/ || echo "Directory not found"
              exit 1
            fi
            
            echo "✅ Deployment files found"
            
            # Set proper permissions
            sudo find /var/www/html/Frontend/dist -type f -exec chmod 644 {} \;
            sudo find /var/www/html/Frontend/dist -type d -exec chmod 755 {} \;
            sudo chown -R www-data:www-data /var/www/html/Frontend/dist/
            echo "✅ Permissions set"
            
            # Configure nginx for HTTPS
            sudo tee /etc/nginx/sites-available/default > /dev/null << 'EOF'
            # Block direct IP access
            server {
                listen 80 default_server;
                listen [::]:80 default_server;
                server_name _;
                return 444;
            }
            
            # Redirect HTTP to HTTPS
            server {
                listen 80;
                listen [::]:80;
                server_name amoghconnect.com www.amoghconnect.com;
                return 301 https://$server_name$request_uri;
            }
            
            # Main HTTPS server
            server {
                listen 443 ssl http2;
                listen [::]:443 ssl http2;
                server_name amoghconnect.com www.amoghconnect.com;
                
                # SSL Configuration
                ssl_certificate /etc/letsencrypt/live/amoghconnect.com/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/amoghconnect.com/privkey.pem;
                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
                ssl_prefer_server_ciphers off;
                ssl_session_cache shared:SSL:10m;
                ssl_session_timeout 10m;
                
                root /var/www/html/Frontend/dist;
                index index.html index.htm;
                
                # Handle all routes for SPA
                location / {
                    try_files $uri $uri/ /index.html;
                }
                
                # Cache control for index.html
                location = /index.html {
                    add_header Cache-Control "no-cache, no-store, must-revalidate" always;
                    add_header Pragma "no-cache" always;
                    add_header Expires "0" always;
                }
                
                # Cache static assets
                location /assets/ {
                    expires 1h;
                    add_header Cache-Control "public, max-age=3600";
                }
                
                # Cache other static files
                location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|mp4|woff|woff2|ttf|eot)$ {
                    expires 1h;
                    add_header Cache-Control "public, max-age=3600";
                }
                
                # Handle 404 errors
                error_page 404 /index.html;
            }
            EOF
            
            # Configure API subdomain
            sudo tee /etc/nginx/sites-available/api.amoghconnect.com > /dev/null << 'EOF'
            # API subdomain configuration
            server {
                listen 80;
                listen [::]:80;
                server_name api.amoghconnect.com;
                return 301 https://$server_name$request_uri;
            }
            
            server {
                listen 443 ssl http2;
                listen [::]:443 ssl http2;
                server_name api.amoghconnect.com;
                
                # SSL Configuration
                ssl_certificate /etc/letsencrypt/live/amoghconnect.com/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/amoghconnect.com/privkey.pem;
                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
                ssl_prefer_server_ciphers off;
                ssl_session_cache shared:SSL:10m;
                ssl_session_timeout 10m;
                
                # Proxy to backend API
                location / {
                    proxy_pass http://13.235.148.91:3000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_cache_bypass $http_upgrade;
                    proxy_read_timeout 86400;
                }
            }
            EOF
            
            # Enable API subdomain
            sudo ln -sf /etc/nginx/sites-available/api.amoghconnect.com /etc/nginx/sites-enabled/
            
            # Test nginx configuration
            if sudo nginx -t; then
              echo "✅ Nginx configuration is valid"
              sudo systemctl reload nginx
              echo "✅ Nginx reloaded"
            else
              echo "❌ Nginx configuration failed"
              sudo nginx -t
              exit 1
            fi
            
            # Wait for nginx to fully reload
            sleep 3
            
            # Test the website with HTTPS
            echo "Testing website with HTTPS..."
            HTTPS_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://amoghconnect.com)
            echo "HTTPS Response Code: $HTTPS_RESPONSE"
            
            if [ "$HTTPS_RESPONSE" = "200" ]; then
              echo "✅ Website is working correctly with HTTPS"
            else
              echo "❌ Website test failed (Status: $HTTPS_RESPONSE)"
              echo "Checking nginx error logs..."
              sudo tail -10 /var/log/nginx/error.log
              exit 1
            fi
            
            # Test API subdomain
            echo "Testing API subdomain..."
            API_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://api.amoghconnect.com/api/test)
            echo "API Response Code: $API_RESPONSE"
            
            if [ "$API_RESPONSE" = "200" ]; then
              echo "✅ API subdomain is working correctly"
            else
              echo "⚠️ API subdomain test failed (Status: $API_RESPONSE)"
              echo "This might be due to DNS propagation delay"
            fi
            
            echo "🎉 Frontend deployment completed successfully!" 